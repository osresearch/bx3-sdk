//  epb_MmBp.h
//  WeChat Embedded Proto Buffer
//
//  Generated by harlliu@tencent.com on 14-11-26.
//  Copyright 2014 Tencent. All rights reserved.
//

//  Version : 1.0.4

#ifndef __EPB_MMBP_H__
#define __EPB_MMBP_H__

#include <stdint.h>
//#include "hal_types.h"
#include <stdbool.h>
#include "epb.h"

//---------------------------------------------------------------------------
//-                             Typedef enum                                -
//---------------------------------------------------------------------------
typedef enum
{
	ECI_none = 0,
        
        // Req： 蓝牙设备 -> 微信/厂商服务器
        ECI_req_auth = 10001,                       // 登录
        ECI_req_sendData = 10002,                   // 发送数据给厂商
        ECI_req_init = 10003,                       // 初始化
        
        // Resp： 微信/厂商服务器 -> 蓝牙设备
        ECI_resp_auth = 20001,
        ECI_resp_sendData = 20002,
        ECI_resp_init = 20003,
    
        // Push： 微信/厂商服务器 -> 蓝牙设备
        ECI_push_recvData = 30001,   // 厂商发送数据给蓝牙设备
        ECI_push_switchView = 30002,                // 进入/退出界面
        ECI_push_switchBackgroud = 30003,           // 切换后台

        ECI_err_decode = 29999                      // 解密失败的错误码。注意：这不是cmdid。为节省固定包头大小，这种特殊的错误码放在包头的 cmdid 字段。
        
} EmCmdId;

typedef enum
{
        EEC_system = -1 ,                           // 通用的错误
        EEC_needAuth = -2 ,                         // 设备未登录
        EEC_sessionTimeout = -3 ,                   // session 超时，需要重新登录
        EEC_decode = -4 ,                           // proto 解碼失败
        EEC_deviceIsBlock = -5 ,                    // 设备出现异常，导致被微信临时性禁止登录
        EEC_serviceUnAvalibleInBackground = -6 ,    // ios 处于后台模式，无法正常服务
        EEC_deviceProtoVersionNeedUpdate = -7 ,     // 设备的 proto 版本过老，需要更新
        EEC_phoneProtoVersionNeedUpdate = -8 ,      // 微信客户端的 proto 版本过老，需要更新
        EEC_maxReqInQueue = -9 ,                    // 设备发送了多个请求，并且没有收到回包。微信客户端请求队列壅塞。
        EEC_userExitWxAccount = -10                 // 用户退出微信账号。
} EmErrorCode ;
//-----

typedef enum
{
	EAM_md5 = 1,// 设备通过Md5DeviceTypeAndDeviceId，来通过微信app 的认证。1.
                    //如果是用aes 加密，注意设置AesSign 有值。 2. 如果是没有加密，注意设置AesSign 为空或者长度为零。
	EAM_macNoEncrypt_e = 2 // 设备通过mac 地址字段，且没有加密，来通过微信app 的认证。
} EmAuthMethod;

//-----初始化包要的资料-----
typedef enum
{
	EIRFF_userNickName = 0x1,
	EIRFF_platformType = 0x2,
	EIRFF_model = 0x4,
	EIRFF_os = 0x8,
	EIRFF_time = 0x10,
	EIRFF_timeZone = 0x20,
	EIRFF_timeString = 0x40
} EmInitRespFieldFilter;

typedef enum
{
        EIM_deviceChat = 1 ,                        // 聊天
        EIM_autoSync = 2                            // 自动同步
} EmInitScence;

typedef enum
{
	EPT_ios = 1,
	EPT_andriod = 2,
	EPT_wp = 3,
	EPT_s60v3 = 4,
	EPT_s60v5 = 5,
	EPT_s40 = 6,
	EPT_bb = 7
} EmPlatformType;

typedef enum
{
	EDDT_manufatureSvr = 0,   // 厂商自定义数据
	EDDT_wxWristBand = 1,     // 微信公众平台手环数据
	EDDT_wxDeviceHtmlChatView = 10001   // 微信客户端设备html5 会话界面数据
} EmDeviceDataType;

typedef enum
{
	ESVO_enter = 1,
	ESVO_exit = 2
} EmSwitchViewOp;

typedef enum
{
	EVI_deviceChatView = 1,       // 微信客户端设备号会话界面
	EVI_deviceChatHtmlView = 2   // 微信客户端设备号Html5 会话界面。注意：只有当H5 界面主动和
                                     //设备连接上之后，才会发送push。
} EmViewId;

typedef enum
{
        EEVO_enterBackground = 1 ,                  // 进入后台
        EEVO_enterForground = 2 ,                   // 进入前台
        EEVO_sleep = 3                              // 后台休眠
} EmSwitchBackgroundOp;

//---------------------------------------------------------------------------
//-                             Typedef Struct                              -
//---------------------------------------------------------------------------
//-----Base-----
typedef struct
{
	void *none;
} BaseRequest;

typedef struct
{
	int32_t err_code;
	bool has_err_msg;
	CString err_msg;
} BaseResponse;

typedef struct
{
	void *none;
} BasePush;
//-----

//-----AuthRequest（登录请求）-----
typedef struct
{
	BaseRequest *base_request;
	bool has_md5_device_type_and_device_id;
	Bytes md5_device_type_and_device_id;  // deviceType 加deviceId 的md5，16 字节的二进制数据
	int32_t proto_version; // 设备支持的本proto 文件的版本号，第一个字节表示最小版本，第二个字节表示小版本，第三字节表示大版本。版本号为1.0.0 的话，应该填：0x010000；
	int32_t auth_proto; // 填1
	EmAuthMethod auth_method; // 验证和加密的方法，见EmAuthMethod
	bool has_aes_sign;
	Bytes aes_sign;
	bool has_mac_address;
	Bytes mac_address;    // mac 地址，6 位。当设备没有烧deviceId 的时候，可使用该mac 地址字段来通过微信app 的认证
	bool has_time_zone;  // 废弃
	String time_zone;
	bool has_language;   // 废弃
	String language;
	bool has_device_name; // 废弃
	String device_name;  
} AuthRequest;

//-----AuthResponse（登录响应）-----
typedef struct
{
	BaseResponse *base_response;
	CBytes aes_session_key;
} AuthResponse;

//-----InitRequest-----
typedef struct
{
	BaseRequest *base_request;  
	bool has_resp_field_filter;
	Bytes resp_field_filter; // 当一个bit 被设置就表示要resp 的某个字段：见EmInitRespFieldFilter。
	bool has_challenge;
	Bytes challenge;  // 设备用来验证手机是否安全。为设备随机生成的四个字节。
} InitRequest;

//-----InitResponse-----
typedef struct
{
	BaseResponse *base_response;
	uint32_t user_id_high;  // 微信用户Id 高32 位
	uint32_t user_id_low;   // 微信用户Id 低32 位
	bool has_challeange_answer;
	uint32_t challeange_answer;  // 手机回复设备的挑战。为设备生成的字节的crc32。
	bool has_init_scence;
	EmInitScence init_scence;   //微信连接上设备时，处于什么情景。如果该字段为空，表示处于EIS_deviceChat 下。
	bool has_auto_sync_max_duration_second;
	uint32_t auto_sync_max_duration_second;  // 自动同步最多持续多长，微信就会关闭连接。0xffffffff 表示无限长。
	bool has_user_nick_name;
	CString user_nick_name;  // 微信用户昵称
	bool has_platform_type;
	EmPlatformType platform_type;  // 手机平台
	bool has_model;
	CString model;  // 手机硬件型号
	bool has_os;
	CString os;  // 手机os 版本
	bool has_time;
	int32_t time;  // 手机当前时间
	bool has_time_zone;
	int32_t time_zone;  // 手机当前时区
	bool has_time_string;
	CString time_string; // 手机当前时间，格式如201402281005285，具体字段
                             //意义为2014（年）02（2 月）28（28 号）10（点）05（分钟）28（秒）5（星期五）。星期一为1，星期天为7。
} InitResponse;

//-----SendDataToManufacturerSvrRequest-----
typedef struct
{
	BaseRequest *base_request;
	Bytes data;
	bool has_type;
	EmDeviceDataType type;  //数据类型(如厂商自定义数据，或公众平台规定的手
                                //环数据，或微信客户端设备html5 会话界面数据等）。不填，或者等于0 的时候，表示设备发送厂商自定
                                //义数据到厂商服务器。
} SendDataRequest;

//-----SendDataToManufacturerSvrResponse-----
typedef struct
{
	BaseResponse *base_response;
	bool has_data;
	CBytes data;
} SendDataResponse;

//-----ManufacturerSvrSendDataPush-----
typedef struct
{
	BasePush *base_push;
	CBytes data;
	bool has_type;
	EmDeviceDataType type;
} RecvDataPush;

//-----SwitchViewPush-----
typedef struct
{
	BasePush *base_push;
	EmSwitchViewOp switch_view_op;  // 进入或者退出View
	EmViewId view_id;   // view 的id
} SwitchViewPush;

//-----SwitchBackgroudPush-----
typedef struct
{
	BasePush *base_push;
	EmSwitchBackgroundOp switch_background_op;
} SwitchBackgroudPush;

//---------------------------------------------------------------------------
//-                             Extern                                      -
//---------------------------------------------------------------------------
#define htonl(x)   __bswap_32(x)
uint32_t __bswap_32(uint32_t __val) ;

BaseResponse *epb_unpack_base_response(const uint8_t *buf, int buf_len);
void epb_unpack_base_response_free(BaseResponse *response);

int epb_auth_request_pack_size(AuthRequest *request);
int epb_pack_auth_request(AuthRequest *request, uint8_t *buf, int buf_len);

AuthResponse *epb_unpack_auth_response(const uint8_t *buf, int buf_len);
void epb_unpack_auth_response_free(AuthResponse *response);

int epb_init_request_pack_size(InitRequest *request);
int epb_pack_init_request(InitRequest *request, uint8_t *buf, int buf_len);

InitResponse *epb_unpack_init_response(const uint8_t *buf, int buf_len);
void epb_unpack_init_response_free(InitResponse *response);

int epb_send_data_request_pack_size(SendDataRequest *request);
int epb_pack_send_data_request(SendDataRequest *request, uint8_t *buf, int buf_len);

SendDataResponse *epb_unpack_send_data_response(const uint8_t *buf, int buf_len);
void epb_unpack_send_data_response_free(SendDataResponse *response);

RecvDataPush *epb_unpack_recv_data_push(const uint8_t *buf, int buf_len);
void epb_unpack_recv_data_push_free(RecvDataPush *push);

SwitchViewPush *epb_unpack_switch_view_push(const uint8_t *buf, int buf_len);
void epb_unpack_switch_view_push_free(SwitchViewPush *push);

SwitchBackgroudPush *epb_unpack_switch_backgroud_push(const uint8_t *buf, int buf_len);
void epb_unpack_switch_backgroud_push_free(SwitchBackgroudPush *push);

#endif
